---
import OgContent from "@/components/craft/og/OgContent.astro";
import { getOgShortLink } from "@/db/og";
import BaseLayout from "@/layouts/BaseLayout.astro";

export const prerender = false;

const { lang, value } = Astro.params;

const parse = async () => {
  const values = value?.split("/") ?? [];

  if (values.length === 0) {
    return { title: "", description: "", redirectUrl: "" };
  }

  if (values.length === 1) {
    try {
      const shortLink = values[0];
      const { title, description, redirect_url } =
        await getOgShortLink(shortLink);
      return {
        title: title,
        description: description ?? "",
        redirectUrl: redirect_url ?? "",
      };
    } catch {
      return {
        title: decodeURIComponent(values[0]),
        description: "",
        redirectUrl: "",
      };
    }
  }

  if (values.length === 2) {
    // legacy
    const [rawTitle, rawDescription] = value?.split("/") ?? [];
    const title = decodeURIComponent(rawTitle ?? "");
    const description = decodeURIComponent(rawDescription ?? "");
    return { title, description, redirectUrl: "" };
  }

  return { title: "test", description: "test", redirectUrl: "" };
};

const { title, description, redirectUrl } = await parse();

const ogImageUrl = new URL(
  `/api/og/${encodeURIComponent(title)}`,
  Astro.url.origin,
);

const ogTitle = title === "" ? "링크 미리보기 생성기" : title;
const ogDescription =
  description === ""
    ? "내맘대로 만드는 링크 미리보기 제목/설명/이미지"
    : description;
---

<BaseLayout
  lang="ko"
  title={ogTitle}
  description={ogDescription}
  opengraph={{ image: ogImageUrl.toString() }}
  additionalMetaProperties={redirectUrl === ""
    ? undefined
    : [{ "http-equiv": "refresh", content: `2; url=${redirectUrl}` }]}
>
  <div class="mx-auto flex max-w-2xl flex-col gap-8 px-6">
    <h1 class="text-2xl font-bold">
      {lang === "ko" ? "링크 미리보기 생성기" : "Link Preview Generator"}
    </h1>
    {
      redirectUrl === "" ? (
        <OgContent
          lang={lang ?? "ko"}
          title={title}
          description={description}
          redirectUrl={redirectUrl}
        />
      ) : lang === "ko" ? (
        <p>
          <a href={redirectUrl} class="underline">
            {redirectUrl}
          </a>
          로 리다이렉트 중...
        </p>
      ) : (
        <p>
          Redirecting to{" "}
          <a href={redirectUrl} class="underline">
            {redirectUrl}
          </a>
          ...
        </p>
      )
    }
  </div>
</BaseLayout>
